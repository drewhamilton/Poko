// Each published module must declare ext.artifactName and ext.pomName, and then apply this file. If the published
//  artifact is a Gradle plugin, it must also declare ext.gradlePluginDomainObjectName

group = rootProject.publish_group
version = rootProject.publish_version

task sourcesJar(type: Jar) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allSource
}

apply plugin: 'org.jetbrains.dokka'
dokkaJavadoc {
    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set 'javadoc'
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

assemble {
    dependsOn sourcesJar
    dependsOn javadocJar
}

apply plugin: 'maven-publish'
publishing {
    boolean isGradlePlugin = project.plugins.hasPlugin("java-gradle-plugin")

    List<String> publicationNames = []
    if (isGradlePlugin) {
        publicationNames.add("pluginMaven")
        publicationNames.add("${gradlePluginDomainObjectName}PluginMarkerMaven")
    } else {
        publicationNames.add("release")
    }

    publicationNames.forEach { publicationName ->
        if (!publicationName.contains("PluginMarkerMaven")) {
            publications.create(publicationName, MavenPublication) {
                if (!isGradlePlugin) {
                    groupId group
                    artifactId artifactName
                    version version

                    from components.java
                }
                artifact sourcesJar
                artifact javadocJar
            }
        }

        // Using afterEvaluate because Plugin Marker publication is created later, by a different plugin:
        afterEvaluate {
            publications.findByName(publicationName).pom {
                name = pomName
                description = "A Kotlin compiler plugin for generating equals, hashCode, and toString for plain old Kotlin objects."

                url = 'https://github.com/drewhamilton/Poko'
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'drewhamilton'
                        name = 'Drew Hamilton'
                        email = 'software@drewhamilton.dev'
                    }
                }

                scm {
                    connection = 'scm:git:github.com/drewhamilton/Poko.git'
                    developerConnection = 'scm:git:ssh://github.com/drewhamilton/Poko.git'
                    url = 'https://github.com/drewhamilton/Poko/tree/main'
                }
            }
        }
    }

    repositories {
        maven {
            name = "MavenCentral"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            def sonatypeIssuesUsername = findProperty('personalSonatypeIssuesUsername')
            def sonatypeIssuesPassword = findProperty('personalSonatypeIssuesPassword')
            credentials {
                username sonatypeIssuesUsername
                password sonatypeIssuesPassword
            }
        }
    }
}

apply plugin: 'signing'
boolean isCi = System.getenv().get("CI") == "true"
if (!isCi) {
    ext."signing.keyId" = findProperty("personalGpgKeyId") ?: "x"
    ext."signing.password" = findProperty("personalGpgPassword") ?: "x"
    ext."signing.secretKeyRingFile" = findProperty("personalGpgKeyringFile") ?: "x"
}
signing {
    if (isCi) {
        logger.lifecycle("Signing on CI")
        def key = findProperty("personalGpgKey")
        def password = findProperty("personalGpgPassword")
        useInMemoryPgpKeys(key, password)
    }
    sign publishing.publications
}
