import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    // Shared gradle.properties
    Properties properties = new Properties()
    file("../gradle.properties").withInputStream { properties.load(it) }
    properties.each { key, val ->
        ext.set(key, val)
    }

    String compileMode = project.property('compile_mode').toString()
    boolean useCompose = compileMode == 'jetpack-compose'
    repositories {
        mavenCentral()
        if (useCompose) {
            google()
            maven { url "https://androidx.dev/storage/compose-compiler/repository" }
        }
    }

    dependencies {
        classpath("$publish_group:$publish_gradle_plugin_artifact")
        classpath(libs.kotlin.gradle)

        if (useCompose) {
            classpath(libs.android.gradle)
        }
    }
}

String compileMode = project.property('compile_mode').toString()
boolean useCompose = compileMode == 'jetpack-compose'
if (useCompose) {
    apply plugin: 'com.android.library'
    apply plugin: 'org.jetbrains.kotlin.android'
} else {
    apply plugin: 'org.jetbrains.kotlin.jvm'
}
apply plugin: 'dev.drewhamilton.poko'

poko {
    pokoAnnotation.set 'dev.drewhamilton.poko.sample.Poko'
    enabled.set true
}

String resolvedJvmTarget = System.getenv().getOrDefault('ci_java_version', JavaVersion.VERSION_1_8.toString())
if (useCompose) {
    android {
        compileSdkVersion 31

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 31
        }

        compileOptions {
            sourceCompatibility resolvedJvmTarget
            targetCompatibility resolvedJvmTarget
        }

        kotlinOptions {
            jvmTarget = resolvedJvmTarget
            freeCompilerArgs += [
                '-progressive',
            ]
        }

        buildFeatures {
            compose true

            // Disable unused AGP features
            buildConfig false
            aidl false
            renderScript false
            resValues false
            shaders false
        }

        composeOptions {
            kotlinCompilerExtensionVersion libs.versions.androidx.compose.compiler.get()
        }
    }
} else {
    boolean useIr = compileMode == 'use-ir-true'
    logger.lifecycle "$project: useIR = $useIr"
    project.tasks.withType(KotlinCompile.class).configureEach {
        kotlinOptions {
            jvmTarget = resolvedJvmTarget
            freeCompilerArgs += ['-progressive']
            useIR = useIr
        }
    }
}

dependencies {
    if (useCompose) {
        implementation(libs.androidx.compose.runtime)
    }

    testImplementation(libs.junit)
    testImplementation(libs.truth)
}

repositories {
    mavenCentral()
    if (useCompose) {
        google()
        maven { url "https://androidx.dev/storage/compose-compiler/repository" }
    }
}
